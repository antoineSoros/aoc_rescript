// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var ReadFile = require("../../util/ReadFile.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var LogSolution = require("../../util/LogSolution.bs.js");

var fileToArray = ReadFile.fileToString("./src/exos/ex2/input2.txt");

function stringToGagme(s) {
  switch (s) {
    case "A" :
    case "X" :
        return /* Rock */0;
    case "B" :
    case "Y" :
        return /* Paper */1;
    case "C" :
    case "Z" :
        return /* Scissors */2;
    default:
      return /* Rock */0;
  }
}

function countScore(games) {
  var him = Caml_array.get(games, 0);
  var me = Caml_array.get(games, 1);
  switch (him) {
    case /* Rock */0 :
        switch (me) {
          case /* Rock */0 :
              return 4;
          case /* Paper */1 :
              return 8;
          case /* Scissors */2 :
              return 3;
          
        }
    case /* Paper */1 :
        switch (me) {
          case /* Rock */0 :
              return 1;
          case /* Paper */1 :
              return 5;
          case /* Scissors */2 :
              return 9;
          
        }
    case /* Scissors */2 :
        switch (me) {
          case /* Rock */0 :
              return 7;
          case /* Paper */1 :
              return 2;
          case /* Scissors */2 :
              return 6;
          
        }
    
  }
}

function myPlay(games) {
  var match = Caml_array.get(games, 0);
  var match$1 = Caml_array.get(games, 1);
  switch (match) {
    case /* Rock */0 :
        switch (match$1) {
          case /* Rock */0 :
              return [
                      /* Rock */0,
                      /* Scissors */2
                    ];
          case /* Paper */1 :
              return [
                      /* Rock */0,
                      /* Rock */0
                    ];
          case /* Scissors */2 :
              return [
                      /* Rock */0,
                      /* Paper */1
                    ];
          
        }
    case /* Paper */1 :
        switch (match$1) {
          case /* Rock */0 :
              return [
                      /* Paper */1,
                      /* Rock */0
                    ];
          case /* Paper */1 :
              return [
                      /* Paper */1,
                      /* Paper */1
                    ];
          case /* Scissors */2 :
              return [
                      /* Paper */1,
                      /* Scissors */2
                    ];
          
        }
    case /* Scissors */2 :
        switch (match$1) {
          case /* Rock */0 :
              return [
                      /* Scissors */2,
                      /* Paper */1
                    ];
          case /* Paper */1 :
              return [
                      /* Scissors */2,
                      /* Scissors */2
                    ];
          case /* Scissors */2 :
              return [
                      /* Scissors */2,
                      /* Rock */0
                    ];
          
        }
    
  }
}

function makeArrayFromFile(param) {
  return Belt_Array.map(Belt_Array.map(fileToArray.trim().split("\n"), (function (s) {
                    return s.split(" ");
                  })), (function (s) {
                return Belt_Array.map(s, stringToGagme);
              }));
}

function solution1(param) {
  var array = Belt_Array.reduce(makeArrayFromFile(undefined), 0, (function (acc, games) {
          return acc + countScore(games) | 0;
        }));
  LogSolution.make("2.1", array);
}

function solution2(param) {
  var array = Belt_Array.reduce(Belt_Array.map(makeArrayFromFile(undefined), myPlay), 0, (function (acc, games) {
          return acc + countScore(games) | 0;
        }));
  LogSolution.make("2.2", array);
}

exports.fileToArray = fileToArray;
exports.stringToGagme = stringToGagme;
exports.countScore = countScore;
exports.myPlay = myPlay;
exports.makeArrayFromFile = makeArrayFromFile;
exports.solution1 = solution1;
exports.solution2 = solution2;
/* fileToArray Not a pure module */
